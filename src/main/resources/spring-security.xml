<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
    xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd ">
	<oauth:authorization-server client-details-service-ref="client-details-service" token-services-ref="tokenServices" user-approval-handler-ref="oauthUserApprovalHandler">  
        <oauth:refresh-token/>  
        <oauth:password/>  
    </oauth:authorization-server>
    <bean id="oauthAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="test"/>
    </bean>


    <bean id="clientAuthenticationEntryPoint"
        class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <!-- <property name="realmName" value="springsec/client" /> -->
    </bean>
    <bean id="oauthAccessDeniedHandler"
        class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler">
    </bean>
    <bean id="loginUrlAuthenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
    	<property name="loginFormUrl" value="/login.htm"></property>
    </bean>
    <bean id="oauthUserApprovalHandler" class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler">  
	</bean> 
    <http pattern="/oauth/**" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"  
      xmlns="http://www.springframework.org/schema/security" auto-config="true">  
	    <anonymous enabled="false"/>  
	    <http-basic entry-point-ref="clientAuthenticationEntryPoint"/>  
    	<access-denied-handler ref="oauthAccessDeniedHandler"/>  
	</http> 
	<!--  
    <http pattern="/v1/*" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" 
          xmlns="http://www.springframework.org/schema/security">
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauthAccessDeniedHandler"/>
    </http>
    -->
    <http pattern="/v1/**" create-session="never" entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"
    xmlns="http://www.springframework.org/schema/security">
    		<intercept-url pattern='/v1/**' access="ROLE_USER"/> 
    		<intercept-url pattern='/v1/protected/**' access="IS_AUTHENTICATED_FULLY"/>
   			 <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
        	<access-denied-handler ref="oauthAccessDeniedHandler"/> 
 	 </http>
     <http pattern="/**" auto-config="true"
    xmlns="http://www.springframework.org/schema/security">
    		<intercept-url pattern='/resources/**' access="ROLE_USER"/>
    		<!--  <intercept-url pattern='/myHandler' access="ROLE_USER"/>-->
    		<intercept-url pattern="/gymList.htm" access="ROLE_USER" />
    		<intercept-url pattern="/gymDetail.htm" access="ROLE_USER" />
<!--     		<intercept-url pattern="/json/**" access="ROLE_USER" /> -->
    		<intercept-url pattern="/tv.htm" access="ROLE_USER" />
    		<form-login login-page="/login.htm" authentication-failure-url="/login.htm" authentication-success-handler-ref="ajaxAuthenticationSuccessHandler" authentication-failure-handler-ref="ajaxAuthenticationFailHandler"></form-login>  		
 	 		<logout invalidate-session="true" logout-success-url="/login.htm"></logout>
 	 </http>
    <bean id="ajaxAuthenticationSuccessHandler" class="com.sdp.security.AjaxAuthenticationSuccessHandler" >
    	    <property name="useReferer" value="true"/>
    </bean>
    <bean id="ajaxAuthenticationFailHandler" class="com.sdp.security.AjaxAuthenticationFailHandler" >
    </bean>
	<bean id="clientCredentialsTokenEndpointFilter"  
      class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">  
    <property name="authenticationManager" ref="clientAuthenticationManager"/>  
	</bean>  
	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">  
	    <authentication-provider user-service-ref="client-details-user-service"/>  
	</authentication-manager>  
	  
	  
	<bean id="client-details-user-service" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">  
	    <constructor-arg ref="client-details-service" />  
	</bean> 
	<bean id="client-details-service" class="org.springframework.security.oauth2.provider.client.JdbcClientDetailsService">
		<constructor-arg ref="dataSource" /> 
	</bean>
	
	<!--  
	<oauth:client-details-service id="client-details-service">  
    -->
	    <!-- Allow access to test clients -->
        <!--  
        <oauth:client  
                client-id="353b302c44574f565045687e534e7d6a"  
                secret="286924697e615a672a646a493545646c"  
                authorized-grant-types="password,refresh_token"  
                authorities="ROLE_USER"  
                access-token-validity="30000"  
                autoapprove = "true"
                refresh-token-validity="30000"  
                scope="read, write"
                />  
  		-->
        <!-- Web Application clients -->  
        <!--  
        <oauth:client  
                client-id="7b5a38705d7b3562655925406a652e32"  
                secret="655f523128212d6e70634446224c2a48"  
                authorized-grant-types="password,refresh_token"  
                authorities="ROLE_WEB"  
                access-token-validity="30000"  
                refresh-token-validity="30000"  
                />  
  		-->
        <!-- iOS clients --> 
        <!--   
        <oauth:client  
                client-id="5e572e694e4d61763b567059273a4d3d"  
                secret="316457735c4055642744596b302e2151"  
                authorized-grant-types="password,refresh_token"  
                authorities="ROLE_IOS"  
                access-token-validity="30000"  
                refresh-token-validity="30000"  
                />  
  		-->
        <!-- Android clients -->  
        <!-- 
        <oauth:client  
                client-id="302a7d556175264c7e5b326827497349"  
                secret="4770414c283a20347c7b553650425773"  
                authorized-grant-types="password,refresh_token"  
                authorities="ROLE_ANDROID"  
                access-token-validity="30000"  
                refresh-token-validity="30000"  
                />  
  		-->
  	<!--  
	</oauth:client-details-service>  
	-->
<!--
   	<bean id="passwordEncoder" class="org.springframework.security.crypto.password.StandardPasswordEncoder"/>
	 	-->
   	<bean id="passwordEncoder" class="com.sdp.userDetailsService.PasswordEncoderImpl" />
   	  
    <authentication-manager alias="authenticationManager"
        xmlns="http://www.springframework.org/schema/security">
        <!-- <authentication-provider user-service-ref="clientDetailsUserService" /> -->
        <authentication-provider user-service-ref="customUserDetailsServcie">
            <!--  
        	<password-encoder hash="md5"/>		 
       	-->
        	<password-encoder ref="passwordEncoder" /> 
        	 
        	<!--  
        	<jdbc-user-service data-source-ref="dataSource"/>
        	-->
        <!--
            <user-service id="userDetailsService">
                <user name="marissa" password="koala" authorities="ROLE_TEST" />
                <user name="paul" password="emu" authorities="ROLE_GUEST" />
            </user-service>
            --> 
      
        </authentication-provider>
    </authentication-manager>
    <bean id="customUserDetailsServcie" class="com.sdp.userDetailsService.UserDetailsServiceImpl"/>
    <!-- Used for the persistenceof tokens (currently an in memory implementation) -->
    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
    	<constructor-arg ref="dataSource"></constructor-arg>
    </bean>

    <!-- Used to create token and and every thing about them except for their persistence that is reposibility of TokenStore (Given here is a default implementation) -->
    <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="supportRefreshToken" value="true" />
        <property name="accessTokenValiditySeconds" value="300000"></property>
        <property name="clientDetailsService" ref="client-details-service" />
    </bean>
	<oauth:resource-server id="resourceServerFilter" token-services-ref="tokenServices"/>
     <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true" secured-annotations="enabled">
    <!--you could also wire in the expression handler up at the layer of the http filters. See https://jira.springsource.org/browse/SEC-1452 -->
    	<sec:expression-handler ref="oauthExpressionHandler" />
    </sec:global-method-security>
    <oauth:expression-handler id="oauthExpressionHandler" />

    <oauth:web-expression-handler id="oauthWebExpressionHandler" />  
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
                <bean class="org.springframework.security.access.vote.RoleVoter" />
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
            </list>
        </constructor-arg>
    </bean>
</beans>